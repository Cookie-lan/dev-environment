version: '3.5'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}
#    ipam:
#      config:
#        - subnet: ${NETWORKS_SUBNET}

services:
#  golang: # 自定义容器名称
#    build:
#      context: ./golang                  # 指定构建使用的 Dockerfile 文件
#    container_name: golang-${USER}
#    environment: # 设置环境变量
#      - TZ=${TZ}
#    privileged: true
#    volumes: # 设置挂载目录
#      - ${CODE_PATH_HOST}:/usr/src/code  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
#    ports: # 设置端口映射
#      - "8000:8000"
#      - "8001:8001"
#      - "8002:8002"
#      - "8003:8003"
#      - "9000:9000"
#      - "9001:9001"
#      - "9002:9002"
#      - "9003:9003"
#    stdin_open: true                     # 打开标准输入，可以接受外部输入
#    tty: true
#    networks:
#      backend:
#        ipv4_address: ${GOLANG_IP}        # 指定容器静态IP
#    restart: always                      # 指定容器退出后的重启策略为始终重启

  redis:
    container_name: redis-${USER}
    build:
      context: ./redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${REDIS_DATA_PATH}:/data
      - ${REDIS_CONF}:/etc/redis/redis.conf
    ports:
      - ${REDIS_PORT}:6379
    networks:
      backend:
#        ipv4_address: ${REDIS_IP}        # 指定容器静态IP
    restart: always
    command: /bin/bash -c "redis-server /etc/redis/redis.conf --appendonly yes"

  mysql:
    container_name: mysql-${USER}
    build:
      context: ./mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
    privileged: true
    volumes:
      - ${MYSQL_DATA_PATH}:/var/lib/mysql        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
      - ${MYSQL_CONF}:/etc/my.cnf   # 引用 .env 配置中 CONF_PATH_HOST 变量，将宿主机上存放 Mysql 配置文件的目录挂载到容器中 /etc/mysql/conf.d 目录
    ports:
      - "3306:3306"                          # 设置容器3306端口映射指定宿主机端口
    networks:
      backend:
#        ipv4_address: ${MYSQL_IP}        # 指定容器静态IP
    restart: always

  etcd: # 自定义容器名称
    container_name: etcd-${USER}
    build:
      context: ./etcd                    # 指定构建使用的 Dockerfile 文件
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes       #参数指不用密码可以连接
      - ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
    ports: # 设置端口映射
      - "${ETCD_PORT}:2379"
      - "2380:2380"
    volumes:
      - ${ETCD_DATA_PATH}:/bitnami/etcd/data
    networks:
      backend:
#        ipv4_address: ${ETCD_IP}        # 指定容器静态IP
    restart: always

  etcd-manage:
    container_name: etcd-manage-${USER}
    build:
      context: ./etcd-manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080"                    # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on: # 依赖容器
      - etcd                                          # 在 etcd 服务容器启动后启动
    networks:
      backend:
#        ipv4_address: ${ETCD_MANAGE_IP}        # 指定容器静态IP
    restart: always

  prometheus:
    container_name: prometheus-${USER}
    build:
      context: ./prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      backend:
#        ipv4_address: ${PROMETHEUS_IP}        # 指定容器静态IP
    restart: always

  grafana:
    container_name: grafana-${USER}
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      backend:
#        ipv4_address: ${GRAFANA_IP}        # 指定容器静态IP
    restart: always

  jaeger:
    container_name: jaeger-${USER}
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      backend:
#        ipv4_address: ${JAEGER_IP}        # 指定容器静态IP
    restart: always

  dtm:
    container_name: dtm-${USER}
    build:
      context: ./dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    privileged: true
    volumes:
      - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      backend:
#        ipv4_address: ${DTM_IP}        # 指定容器静态IP
    restart: always
